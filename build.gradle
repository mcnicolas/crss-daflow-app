buildscript {
    ext {
        springBootVersion = '1.4.2.RELEASE'
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

ext {
    // runnable project has project name format of <projectname>-app
    runnableProject = ['app']
    springbootVersion = '1.4.1.RELEASE'
    nodeVersion = '4.4.7'
}


project.buildDir = 'target'


subprojects {
    apply plugin: 'java'
    apply plugin: "idea"
    apply plugin: "io.spring.dependency-management"

    project.buildDir = 'target'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven {
            url 'http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/'
        }
        maven {
            url 'http://jasperreports.sourceforge.net/maven2'
        }
        maven {
            url 'http://repository.jboss.org/maven2/'
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
apply plugin: 'java'
apply plugin: 'spring-boot'

jar {
    baseName = 'crss-dataflow-app'
    version = '1.1.1.BUILD-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        url 'http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/'
    }
    maven {
        url 'http://jasperreports.sourceforge.net/maven2'
    }
    maven {
        url 'http://repository.jboss.org/maven2/'
    }
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "http://pemc-storage.southeastasia.cloudapp.azure.com:8081/repository/pemc-snapshots/"
    }
}


apply from: file("$rootDir/gradle/docker.gradle")
apply from: file("$rootDir/gradle/deployer.gradle")

configurations {
    compile.exclude module: 'tomcat-jdbc'
}

dependencies {
    compile 'com.pemc.crss:crss-shared-core-dataflow:1.1.1.BUILD-SNAPSHOT'
    compile ('com.pemc.crss:crss-shared-core-config:1.1.1.BUILD-SNAPSHOT') {
        exclude group:'org.springframework.integration', module:'spring-integration-sftp'
        exclude group:'org.springframework.boot', module:'spring-boot-starter-integration'
        exclude group:'org.springframework.batch', module:'spring-batch-integration'
    }

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-batch'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka:1.1.4.RELEASE'
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda'
    compile 'org.springframework.security.oauth:spring-security-oauth2'
    compile 'org.springframework.cloud:spring-cloud-security'

    compile'org.springframework.boot:spring-boot-starter-data-redis:1.4.1.RELEASE'

    // Spring Batch Compatibility Issue
    compile 'org.codehaus.jettison:jettison:1.1'

    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'

    testCompile 'com.pemc.crss:crss-shared-commons-test:1.1.1.BUILD-SNAPSHOT'

    // Database
    runtime 'com.zaxxer:HikariCP'
    runtime 'org.postgresql:postgresql'
    runtime files("$rootDir/libs/ojdbc6-11.2.0.3.jar")
    runtime files("$rootDir/libs/edb-jdbc17.jar")

}

dependencyManagement {
    imports {
        //mavenBom "org.springframework.cloud:spring-cloud-dataflow-dependencies:1.0.1.RELEASE"
        //mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.RELEASE"
        mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.2.0.RELEASE'
        mavenBom "org.springframework.boot:spring-boot-dependencies:$springbootVersion"
        mavenBom "org.springframework.cloud.stream.app:spring-cloud-stream-app-dependencies:1.0.4.RELEASE"
    }
}

/*task pathingJar(type: Jar) {
    dependsOn configurations.runtime
    appendix = 'pathing'

    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtime.files.collect {
                it.toURL().toString().replaceFirst(/file:\/+/, '/')
            }.join(' ')
        }
    }
}*/

bootRun {
    systemProperties = System.properties
}